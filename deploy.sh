#!/bin/bash

# =========================================
# Script de Deploy - Disparador WhatsApp
# =========================================

set -e  # Parar se houver erro

echo "üöÄ Iniciando deploy do Disparador WhatsApp..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cor
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. Verificar se est√° no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    print_error "Erro: docker-compose.yml n√£o encontrado!"
    echo "Execute este script no diret√≥rio /home/plataforma/whatsapp/Disparador"
    exit 1
fi

# 2. Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios..."
mkdir -p data/postgres data/redis data/uploads logs
print_success "Diret√≥rios criados"

# 3. Copiar .env.example para .env se n√£o existir
if [ ! -f ".env" ]; then
    echo "üìù Criando arquivo .env..."
    cp .env.example .env
    print_warning "Arquivo .env criado. Por favor, edite as configura√ß√µes antes de usar em produ√ß√£o!"
else
    print_success "Arquivo .env j√° existe"
fi

# 4. Parar containers antigos
echo "üõë Parando containers antigos..."
docker compose down 2>/dev/null || true
print_success "Containers parados"

# 5. Construir nova imagem
echo "üî® Construindo imagem Docker..."
docker compose build --no-cache
print_success "Imagem constru√≠da"

# 6. Iniciar containers
echo "üöÄ Iniciando containers..."
docker compose up -d
print_success "Containers iniciados"

# 7. Aguardar servi√ßos ficarem prontos
echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
sleep 5

# Verificar health do PostgreSQL
echo -n "Verificando PostgreSQL... "
for i in {1..30}; do
    if docker compose exec -T postgres pg_isready -U disparador_user >/dev/null 2>&1; then
        print_success "PostgreSQL pronto!"
        break
    fi
    if [ $i -eq 30 ]; then
        print_error "PostgreSQL n√£o est√° respondendo"
        exit 1
    fi
    sleep 2
done

# Verificar health do Redis
echo -n "Verificando Redis... "
if docker compose exec -T redis redis-cli ping >/dev/null 2>&1; then
    print_success "Redis pronto!"
else
    print_warning "Redis pode n√£o estar configurado"
fi

# Verificar health da aplica√ß√£o
echo -n "Verificando aplica√ß√£o... "
for i in {1..30}; do
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        print_success "Aplica√ß√£o pronta!"
        break
    fi
    if [ $i -eq 30 ]; then
        print_error "Aplica√ß√£o n√£o est√° respondendo"
        exit 1
    fi
    sleep 2
done

# 8. Mostrar status dos containers
echo ""
echo "üìä Status dos containers:"
docker compose ps

# 9. Verificar Caddy
if systemctl is-active --quiet caddy; then
    print_success "Caddy est√° rodando"
    echo ""
    echo "üåê URLs dispon√≠veis:"
    echo "   Local: http://localhost:3000"
    echo "   Produ√ß√£o: https://demo-disparador.agentesintegrados.com"
else
    print_warning "Caddy n√£o est√° ativo. Execute: sudo systemctl reload caddy"
fi

# 10. Instru√ß√µes finais
echo ""
echo "========================================="
echo -e "${GREEN}‚ú® Deploy conclu√≠do com sucesso!${NC}"
echo "========================================="
echo ""
echo "üìù Credenciais de acesso:"
echo "   Usu√°rio: admin"
echo "   Senha: admin"
echo ""
echo "üîß Comandos √∫teis:"
echo "   Ver logs: docker compose logs -f disparador"
echo "   Parar: docker compose down"
echo "   Reiniciar: docker compose restart"
echo "   Status: docker compose ps"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Em produ√ß√£o, altere as credenciais no arquivo .env"
echo ""